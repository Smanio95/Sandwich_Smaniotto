//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""BaseInputs"",
            ""id"": ""f1498241-da2e-4fd9-b08d-ed7dab00cdec"",
            ""actions"": [
                {
                    ""name"": ""StartTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ff7270ef-dc57-4767-9e53-a4ca5343d66e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f7290e14-930a-4d41-90de-244b0861ef9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""bcf6532c-2a71-40ce-a6c3-0c3cfffb0b88"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5188ab9-a507-4f84-af60-62f6aa16e9ba"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec241970-06e5-4add-8e5b-f0241ab7f2f6"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3071b55d-feaf-492a-a472-8e5a0fd3c0ca"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7266266-28b5-42ea-998d-80ec5653e891"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba3e4817-c3c2-4306-aa54-f57c60c1e5c5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18b7af0b-bb1c-4875-8b80-1e6fb8433c36"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseInputs
        m_BaseInputs = asset.FindActionMap("BaseInputs", throwIfNotFound: true);
        m_BaseInputs_StartTouch = m_BaseInputs.FindAction("StartTouch", throwIfNotFound: true);
        m_BaseInputs_EndTouch = m_BaseInputs.FindAction("EndTouch", throwIfNotFound: true);
        m_BaseInputs_Position = m_BaseInputs.FindAction("Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseInputs
    private readonly InputActionMap m_BaseInputs;
    private List<IBaseInputsActions> m_BaseInputsActionsCallbackInterfaces = new List<IBaseInputsActions>();
    private readonly InputAction m_BaseInputs_StartTouch;
    private readonly InputAction m_BaseInputs_EndTouch;
    private readonly InputAction m_BaseInputs_Position;
    public struct BaseInputsActions
    {
        private @Inputs m_Wrapper;
        public BaseInputsActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartTouch => m_Wrapper.m_BaseInputs_StartTouch;
        public InputAction @EndTouch => m_Wrapper.m_BaseInputs_EndTouch;
        public InputAction @Position => m_Wrapper.m_BaseInputs_Position;
        public InputActionMap Get() { return m_Wrapper.m_BaseInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseInputsActions set) { return set.Get(); }
        public void AddCallbacks(IBaseInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseInputsActionsCallbackInterfaces.Add(instance);
            @StartTouch.started += instance.OnStartTouch;
            @StartTouch.performed += instance.OnStartTouch;
            @StartTouch.canceled += instance.OnStartTouch;
            @EndTouch.started += instance.OnEndTouch;
            @EndTouch.performed += instance.OnEndTouch;
            @EndTouch.canceled += instance.OnEndTouch;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
        }

        private void UnregisterCallbacks(IBaseInputsActions instance)
        {
            @StartTouch.started -= instance.OnStartTouch;
            @StartTouch.performed -= instance.OnStartTouch;
            @StartTouch.canceled -= instance.OnStartTouch;
            @EndTouch.started -= instance.OnEndTouch;
            @EndTouch.performed -= instance.OnEndTouch;
            @EndTouch.canceled -= instance.OnEndTouch;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
        }

        public void RemoveCallbacks(IBaseInputsActions instance)
        {
            if (m_Wrapper.m_BaseInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseInputsActions @BaseInputs => new BaseInputsActions(this);
    public interface IBaseInputsActions
    {
        void OnStartTouch(InputAction.CallbackContext context);
        void OnEndTouch(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
}
